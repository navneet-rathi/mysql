---
- name: ansible script to take backups
  hosts: all
  gather_subset: ['date_time']
  vars:
    base_path: "E:\\ansible\\remote"
    backup_dir: "E:\\Backup"
  tasks:
    - name: Format the date
      set_fact:
        currentdate_: "{{ '%d-%m-%Y' | strftime(ansible_date_time.epoch) }}"

    - name: Display current date to start Backup process.
      ansible.builtin.debug:
        msg: "We are starting backup on {{ currentdate_ }}"  
    
    - name: Get the directory in the deploy path
      ansible.windows.win_find:
        paths: "{{base_path}}"  
        #patterns: "deploy*"
        recurse: yes
        depth: 2
        file_type: directory  
      register: deploypath

    - name: Get the deployment path
      ansible.builtin.debug:
        msg: "{{ deploypath.files | map(attribute='filename') | list  }}" 

    - name: Check if backup Directory Exists
      ansible.builtin.win_stat:
        path: "{{ backup_dir }}"
      register: dir_status

    - name: Create backup Directory if Not Exists
      ansible.builtin.win_file:
        path: "{{ backup_dir }}"
        state: directory
      when: not dir_status.stat.exists

    - name: Added for debugging purpose | we can comment it later
      ansible.builtin.debug:
         msg: "{{ item.filename }}"
      loop: "{{ deploypath.files }}"   
      loop_control:
        label: "{{item.filename}}"

    - name: Create child directory in the backup path as required.
      ansible.builtin.win_file:
        path: "{{ backup_dir }}\\BKP_{{ currentdate_ }}\\{{inventory_hostname}}\\{{ item.path | win_splitdrive | last }}\\{{ item.filename }}"
        state: directory
      loop: "{{ deploypath.files }}"
      loop_control:
        label: "{{item.filename}}"

    - name: copy directory's from source directory to destinations
      ansible.windows.win_copy:
        remote_src: true 
        src: "{{ item.path }}//"
        dest: "{{ backup_dir }}\\BKP_{{ currentdate_ }}\\{{inventory_hostname}}\\{{ item.path | win_splitdrive | last }}\\{{ item.filename }}"
      loop: "{{ deploypath.files }}"
      loop_control:
        label: "{{item.filename}}"  
      when: "{{item.filename}} not in ['deploy', 'deploy_1']"

   # - name: get some details 
   #   ansible.builtin.debug:
   #     msg: "{{ item.path | win_dirname }} && {{ item.path | win_splitdrive | last }} && {{item.path | win_dirname | win_basename }}"
   #   loop: "{{ deploypath.files }}"
   #   loop_control:
   #     label: "{{item.filename}}"       

